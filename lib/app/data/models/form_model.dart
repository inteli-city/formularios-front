import 'package:formularios_front/app/domain/entities/form_entity.dart';
import 'package:formularios_front/app/domain/entities/information_field_entity.dart';
import 'package:formularios_front/app/domain/entities/justificative_entity.dart';
import 'package:formularios_front/app/domain/entities/section_entity.dart';
import 'package:formularios_front/app/domain/enum/form_status_enum.dart';
import 'package:formularios_front/app/domain/enum/priority_enum.dart';

class FormModel extends FormEntity {
  FormModel({
    required super.formId,
    required super.creatorUserId,
    required super.userId,
    required super.coordinatorsId,
    required super.template,
    required super.area,
    required super.system,
    required super.street,
    required super.city,
    required super.number,
    required super.latitude,
    required super.longitude,
    required super.region,
    required super.priority,
    required super.status,
    required super.expirationDate,
    required super.creationDate,
    required super.sections,
    super.comments,
    super.description,
    super.endDate,
    super.informationFields,
    required super.justificative,
    super.startDate,
    super.vinculationFormId,
    required super.formTitle,
    required super.canVinculate,
  });

  static List<FormModel> fromMaps(List<dynamic> list) {
    return list.map((e) => FormModel.fromMap(e)).toList();
  }

  factory FormModel.fromMap(Map<String, dynamic> map) {
    return FormModel(
      formId: map['formId'],
      creatorUserId: map['creatorUserId'],
      userId: map['userId'],
      coordinatorsId: List<String>.from(map['coordinatorsId']),
      template: map['template'],
      area: map['area'],
      system: map['system'],
      street: map['street'],
      city: map['city'],
      number: map['number'],
      latitude: map['latitude'],
      longitude: map['longitude'],
      region: map['region'],
      priority: PriorityEnum.values[map['priority']],
      status: FormStatusEnum.values[map['status']],
      expirationDate: map['expirationDate'],
      creationDate: map['creationDate'],
      sections: [],
      comments: map['comments'],
      description: map['description'],
      endDate: map['endDate'],
      informationFields: [],
      justificative: JustificativeEntity(
        image: map['justificative']['image'],
        options: [],
        selectedOption: map['justificative']['selectedOption'],
        text: map['justificative']['text'],
      ),
      startDate: map['startDate'],
      vinculationFormId: map['vinculationFormId'],
      formTitle: map['formTitle'],
      canVinculate: map['canVinculate'],
    );
  }

  factory FormModel.entityToModel(FormEntity entity) {
    return FormModel(
      formId: entity.formId,
      creatorUserId: entity.creatorUserId,
      userId: entity.userId,
      coordinatorsId: entity.coordinatorsId,
      template: entity.template,
      area: entity.area,
      system: entity.system,
      street: entity.street,
      city: entity.city,
      number: entity.number,
      latitude: entity.latitude,
      longitude: entity.longitude,
      region: entity.region,
      priority: entity.priority,
      status: entity.status,
      expirationDate: entity.expirationDate,
      justificative: entity.justificative,
      creationDate: entity.creationDate,
      sections: entity.sections,
      formTitle: entity.formTitle,
      canVinculate: entity.canVinculate,
      comments: entity.comments,
      description: entity.description,
      endDate: entity.endDate,
      informationFields: entity.informationFields,
      startDate: entity.startDate,
      vinculationFormId: entity.vinculationFormId,
    );
  }

  FormModel copyWith({
    String? formTitle,
    String? formId,
    String? creatorUserId,
    String? userId,
    List<String>? coordinatorsId,
    String? vinculationFormId,
    String? template,
    String? area,
    String? system,
    String? street,
    String? city,
    int? number,
    double? latitude,
    double? longitude,
    String? region,
    String? description,
    PriorityEnum? priority,
    FormStatusEnum? status,
    int? expirationDate,
    int? creationDate,
    int? startDate,
    int? endDate,
    JustificativeEntity? justificative,
    String? comments,
    List<SectionEntity>? sections,
    List<InformationFieldEntity>? informationFields,
    bool? canVinculate,
  }) {
    return FormModel(
      formTitle: formTitle ?? this.formTitle,
      formId: formId ?? this.formId,
      creatorUserId: creatorUserId ?? this.creatorUserId,
      userId: userId ?? this.userId,
      coordinatorsId: coordinatorsId ?? this.coordinatorsId,
      vinculationFormId: vinculationFormId ?? this.vinculationFormId,
      template: template ?? this.template,
      area: area ?? this.area,
      system: system ?? this.system,
      street: street ?? this.street,
      city: city ?? this.city,
      number: number ?? this.number,
      latitude: latitude ?? this.latitude,
      longitude: longitude ?? this.longitude,
      region: region ?? this.region,
      description: description ?? this.description,
      priority: priority ?? this.priority,
      status: status ?? this.status,
      expirationDate: expirationDate ?? this.expirationDate,
      creationDate: creationDate ?? this.creationDate,
      startDate: startDate ?? this.startDate,
      endDate: endDate ?? this.endDate,
      justificative: justificative ?? this.justificative,
      comments: comments ?? this.comments,
      sections: sections ?? this.sections,
      informationFields: informationFields ?? this.informationFields,
      canVinculate: canVinculate ?? this.canVinculate,
    );
  }
}

// Mocks generated by Mockito 5.4.4 from annotations
// in formularios_front/test/app/data/repositories/form_mock_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:formularios_front/app/data/repositories/form_mock_repository.dart'
    as _i4;
import 'package:formularios_front/app/domain/entities/form_entity.dart' as _i5;
import 'package:formularios_front/app/domain/entities/justificative_entity.dart'
    as _i2;
import 'package:formularios_front/app/domain/enum/form_status_enum.dart' as _i8;
import 'package:formularios_front/app/domain/failures/failures.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJustificativeEntity_0 extends _i1.SmartFake
    implements _i2.JustificativeEntity {
  _FakeJustificativeEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FormMockRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormMockRepository extends _i1.Mock
    implements _i4.FormMockRepository {
  MockFormMockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.JustificativeEntity get justificative => (super.noSuchMethod(
        Invocation.getter(#justificative),
        returnValue: _FakeJustificativeEntity_0(
          this,
          Invocation.getter(#justificative),
        ),
      ) as _i2.JustificativeEntity);

  @override
  set justificative(_i2.JustificativeEntity? _justificative) =>
      super.noSuchMethod(
        Invocation.setter(
          #justificative,
          _justificative,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i5.FormEntity> get formList => (super.noSuchMethod(
        Invocation.getter(#formList),
        returnValue: <_i5.FormEntity>[],
      ) as List<_i5.FormEntity>);

  @override
  set formList(List<_i5.FormEntity>? _formList) => super.noSuchMethod(
        Invocation.setter(
          #formList,
          _formList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i5.FormEntity>>> getUserForms(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserForms,
          [],
          {#userId: userId},
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i5.FormEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i5.FormEntity>>(
          this,
          Invocation.method(
            #getUserForms,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i5.FormEntity>>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i5.FormEntity>> updateFormStatus({
    required _i8.FormStatusEnum? status,
    required String? formId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFormStatus,
          [],
          {
            #status: status,
            #formId: formId,
          },
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i5.FormEntity>>.value(
            _FakeEither_1<_i7.Failure, _i5.FormEntity>(
          this,
          Invocation.method(
            #updateFormStatus,
            [],
            {
              #status: status,
              #formId: formId,
            },
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i5.FormEntity>>);
}
